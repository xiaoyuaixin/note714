1、数据类型：
	在Java中，数据严格分成不同的种类，便于计算机识别它，处理它。
	Java中，将数据类型分为两类:
		1) 基本类型;
		
		2) 引用类型。
		
2、在Java中，基本类型又分为 8 种: 
	1) 字节型( byte ) ，它所管理的数据范围是: [ -128 , 127] 。因此，它占一个字节( 1B )
	2) 短整型( short )，它占2B,  它所管理的数据范围是: [-32768, 32767] 
	3) 整型( int )，它占4B,  它所管理的数据范围是: [-2147483648, 2147483647]
	4) 长整型( long )，它占8B，它所管理的数据范围是: [ -2^63 ,  2^63-1 ] 注意: 此范围不可记。
	
	注意: 在Java中，所有的整数默认为int型。因此，当一个整数超出了 int型范围时，
		必须将其看成是 long ，且在其末尾必须添加一个字母L 或 l 。
		
	5) 单精度( float )，它占4B，它的精度是 7位。　
	6) 双精度( double)，它占8B，它的精度是 14位。是float型的双倍。 
	
	注意: 在Java中，所有小数默认为double型，若要将小数赋给float型变量，则必须在这个小数末尾添加一个字母f或F。
	注意: 单精度和双精度统称为浮点数。同时，用来管理小数。
	
	7) 字符型( char )，它占2B，它用一对单引号将一个字符括起来。 如:  'A'  '6'  '%'
		由ASCII表得出: 任何一个字符均对应着一个整数。这个整数通过换算可转换成二进制数。  
	
		在ASCII表的基础，收录其它所有应用计算机技术的国家文字符号组成了一张扩展的表，
		此表命名为 Unicode　国际代码表。
		
		Java语言，为了能够处理所有国家文字符号，因此，在管理字符时，它采用 UNIcode编码表。
		
		UNICode字符编码表中，字符的编码范围是[ 0, 65535 ] 。
		
	8) 逻辑类型(布尔类型)，用 boolean 来表示；其中它的值只有 true和false。  true表示真，false表示假。
		

3、引用类型有三种:
	1) 数组  -----> 看到一对 [] 表明数组出现了。
	2) 类    -----> 看到class 表明类出现了。
	3) 接口  -----> interface
	
4、在java中，整数通常使用三种数据形式:
	1) 十进制数;  ------->>>   36 
	2) 八进制数;  ------->>>  它必须以 0开头，后跟0---7的数组成。如:  036  012 
	3) 十六进制数; ------>>>  它必须以 0x或0X开头，后跟 0---9, A---F(a----f) 组成。如: 0x36A

5、在Java中，小数有两种表示形式:
	1) 小数点方式来表示，如:   3.5   7.0   0.51 
		注意：当小数点前后零省略后，不会改变其大小时，则可以省略。反之，不可。
		例如:  7.0 ---->  7.  再如:  0.51 ---->  .51 	
		
		
	2) 科学记数法表示小数。如:  3.1578E3    2.366E6   1.785 ---> 1.785E0 ---> 1.785E (error)
	
		注意: 字母E或e前后必须有数;  字母E或e的前后不能有空格;  字母e或E的后面必须是整数。
			
			3.1578E3.0 //error
		
6、转义字符:
	1) 什么是转义字符？
		它以 \ 开头，后跟一个字符组成。用来表示一种特定的含义，作用特殊用途。
		
	2) 在Java中，常用的转义字符如下：
		\n 	表示换行，即: 光标落到下一行的开头。
		\r  表示回车，即: 光标回到本行的行头。
		\b	表示退格，即: 光标左移一位。
		\t  表示制表位，即: 光标跳到下一个制表位上。
		
		\\	表示\符号
		\"	表示" 符号
		\'	表示' 符号
		
	课堂练习:
		编写程序去校验 转义字符的作用。从而理解并掌握它们。
		 
	'A'  ---> 'AB'  //error 
	'\n' 
	
7、什么是变量？
	它是一个内存中的存储单元，用来存放指定类型的数据。它是一个容器。
	
8、变量的三要素:
	类型	-----> 基本类型(byte\short\int\long\float\double\char\boolean)或引用类型( class, interface, [] )
	名称    -----> 必须符合标识符的定义
	作用域  -----> 变量的作用范围。
	
9、根据变量的声明位置不同，将变量分为:
	1) 局部变量
		在方法中或语句块中声明的变量
		
		注意: 局部变量没有默认值。 因此，建议在声明局部变量时，往往初始化。
	
	2) 成员变量(实例变量)
		在方法外，在类体中声明的变量。
		
10、变量的特性:
	1) 变量必须先声明，后使用。 Java语言是一种强类型的语言，即：要求变量必须指定类型。
	
	2) 局部变量在使用前要注意初始化。
	
	3) 实例变量有默认值。
	
	4) 变量的值可以在程序的运行期间改变。 
	
	5) 变量的声明格式: 
		类型名 变量名;  或 类型名 变量名 = 值;
	例如: int a ;  或 int a = 10;
	
11、常量:
	1) 什么是常量？在程序运行期间，它始终不变。这种数据就是一个常量。
	
	2) 常量分为两种: 
		a) 字面常量： 看到什么就是什么，如: 36  'A'  3.78 
		b) 符号常量： 用一个标识符来替换某个字面常量。则，这个标识符就是符号常量。
			
	3) 符号常量必须定义，其定义格式如下：
		final 类型名 符号常量名 = 字面常量;
		例如:  final double PI = 3.14;
		
		结论: 符号常量的值，在程序运行期间不可必变。
		好处: 增强了程序的稳定性和程序的可读性。同时，提高了程序的维护效率。
		
12、Java中命名的规范:
	1) 见名知意。
	2) 类名，通常由一个或多个单词组成，每个单词的首字母大写。
		例如: public class Person { ....... }
			public class PersonOfChina { ..... } 
		
	3) 变量名，方法名，通常小写。但，它的名称若有两个或两个以上单词组成时，则
		从第二个单词开始，首字母大写。
		int a;  int area ;  int circle;
		int areaOfCircle;
		
		add();     areaOfShape();
		
	4) 符号常量名，所有字母均大写。
		
	这种现象，称之为驼峰匹配。

13、运算符: 
	1) 算术运算符: + - * / % 	
		注意： / 的左右两边为整数，则结果为整数(商).
		
	2) 自增、自减运算符	:  ++   --
		自增运算符++有两种形式:
		a) 前加，如:  ++a    规则: 先增加，后使用。
		
		b) 后加，如:  a++    规则: 先使用，后增加。
		
		注意: 不论是前加，还是后加, 最终均等价于 a = a + 1; 
	
	
		自减运算符也有两种形式: 
		a) 前减, 如:  --a;   规则: 先减少，后使用;
		b) 后减，如:  a--;   规则: 先使用，后减少。
		
		
	3) 赋值运算符 = 
		格式:  变量 = 表达式;
		规则: 先计算表达式的值，再将值赋给变量存放。
		注意: 
			赋值运算符(=) 的左边一定是一个变量，不可是常量，也不可是表达式。
			
			例如:  5 = 3 + 2;  //error   
				   a + b = 13;  //error 
		
	4) 关系运算符: >  <   >=	 <=  ==  !=  instanceof  属于
	  a) 关系运算符的结果一定是一个逻辑值(要么为true，要么为false)
	  
	  b) 关系运算符由两个或两个以上字符组成时，则它们之间不可有空格。 
	
	
	5) 逻辑运算符:  &&(短路与)   ||(短路或)   !(非)	
	
		a) 格式: !a 
		   规则: 当a 为true时，则结果为false;  反之，则结果为true. 
				 
		b) 格式:  a && b 
		   规则: 当a 和 b 同时为true时，则结果为true; 反之，结果为false;
		   
		   特点: 当 && 的左边为false时，则右边不运算。
		   优点: 节省判断时间，提高判断的效率。
		   
		c) 格式:  a || b
		   规则: 当a和b 中有一个为true时，则结果为true;  反之，则为false;
		   
		   特点: 当 || 的左边为true时，则右边不运算。
		   优点: 节省判断时间，提高判断的效率。
		   
		     